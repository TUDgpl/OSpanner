import random
import tools

class Generator:
    def __init__(self,args):
        self.seed = args.seed[0]
        random.seed(self.seed)
        self.width = args.width[0]
        self.height = args.height[0]
        self.model = args.model[0]
        self.point_size = args.point_size
        self.output_file = args.output[0]
        self.Points = set()
    def info(self):
        print(f'Width:{self.width}')
        print(f'Height:{self.height}')
        print(f'Model:{self.model}')
        print(f'numbe of points:{self.point_number}')
        print(*self.Points,sep="")
    def output(self):
        #TODO: generate the output file name if none is given
        '''write the point set in a file, if the output streaming is not defined, we create the file name wrapping the generator informations'''
        #with open(self.output_file,'w') as fp:
        with self.output_file as fp:
            fp.write(f'c This is a instance generated by the OSpanner {self.model} Generator\n')
            fp.write(f'c with seed {self.seed}\n')
            fp.write(f'p {self.width} {self.height} {self.point_number} \n')
            for p in self.Points:
                fp.write(f"{p.x} {p.y} {p.color} 0\n")
        #print(*self.Points,sep="")       
        # draw the plot and save the plot
        plot_file = self.output_file.name + "_plot"
        with open(self.output_file.name,'r') as input_file:
            problem = draw.Problem(input_file)
            problem.info()
            problem.draw(plot_file)


class UniformGenerator(Generator):
    def __init__(self,args):
        super().__init__(args)
        
        accum_size = 0
        for color in range(self.color_number):
            accum_size = accum_size + self.point_size[color]
            while  len(self.Points) < accum_size:
                x_rand = round(random.uniform(1,self.width-1),self.digits)
                y_rand = round(random.uniform(1,self.height-1),self.digits)
                self.Points.add(toolbox.Point(x_rand,y_rand,color))        
        self.point_number = accum_size
        assert(self.point_number == len(self.Points))